async function handleRequest(request) {
  const url = new URL(request.url);
  const pathname = url.pathname;

  if (pathname === '/' || pathname === '/index.html') {
      const responseBody = `<html>
          <head>
              <title>Proxy Server</title>
          </head>
          <body>
              <h1>Proxy is Running!</h1>
              <p>Details: <a href="https://github.com/tech-shrimp/deno-api-proxy">GitHub</a></p>
          </body>
      </html>`;
      return new Response(responseBody, {
          status: 200,
          headers: {
              'content-type': 'text/html',
          },
      });
  }

  const targetHost = pathname; // 获取路径部分作为目标主机
  const targetUrl = `https://${targetHost}`; // 构造完整的目标URL

  try {
      const headers = new Headers();
      const allowedHeaders = ['accept', 'content-type', 'authorization'];
      for (const [key, value] of request.headers.entries()) {
          if (allowedHeaders.includes(key.toLowerCase())) {
              headers.set(key, value);
          }
      }

      const response = await fetch(targetUrl, {
          method: request.method,
          headers: headers,
          body: request.body,
      });

      const responseHeaders = new Headers(response.headers);
      responseHeaders.set('Referrer-Policy', 'no-referrer');

      return new Response(response.body, {
          status: response.status,
          headers: responseHeaders,
      });

  } catch (error) {
      const errorMessage = `Internal Server Error: ${error.message}`;
      return new Response(errorMessage, {
          status: 500,
          headers: {
              'content-type': 'text/plain',
          },
      });
  }
}

addEventListener('fetch', (event) => {
  event.respondWith(handleRequest(event.request));
});
